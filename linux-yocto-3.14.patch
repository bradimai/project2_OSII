diff -Nur --new-file fresh/linux-yocto-3.14/block/Kconfig.iosched ioschedulerkernel/linux-yocto-3.14/block/Kconfig.iosched
--- fresh/linux-yocto-3.14/block/Kconfig.iosched	2017-05-04 20:56:47.459401656 -0700
+++ ioschedulerkernel/linux-yocto-3.14/block/Kconfig.iosched	2017-05-04 21:36:17.947928091 -0700
@@ -11,6 +11,13 @@
 	  memory devices, and specialised software or hardware environments
 	  that do their own scheduling and require only minimal assistance from
 	  the kernel.
+	  
+config IOSCHED_C_LOOK
+	tristate "C-LOOK I/O scheduler"
+	default y
+	---help---
+	 The circular LOOK I/O scheduler that searches up the disk space for I/O
+	 requests before returning to the first of the disk sectors.
 
 config IOSCHED_DEADLINE
 	tristate "Deadline I/O scheduler"
@@ -41,7 +48,7 @@
 
 choice
 	prompt "Default I/O scheduler"
-	default DEFAULT_CFQ
+	default DEFAULT_C_LOOK
 	help
 	  Select the I/O scheduler which will be used by default for all
 	  block devices.
@@ -51,10 +58,13 @@
 
 	config DEFAULT_CFQ
 		bool "CFQ" if IOSCHED_CFQ=y
+		
+	config DEFAULT_C_LOOK
+		bool "C-LOOK" if IOSCHED_C_LOOK=y
 
 	config DEFAULT_NOOP
 		bool "No-op"
-
+		
 endchoice
 
 config DEFAULT_IOSCHED
@@ -62,6 +72,7 @@
 	default "deadline" if DEFAULT_DEADLINE
 	default "cfq" if DEFAULT_CFQ
 	default "noop" if DEFAULT_NOOP
+	default "c_look" if DEFAULT_C_LOOK
 
 endmenu
 
diff -Nur --new-file fresh/linux-yocto-3.14/block/Makefile ioschedulerkernel/linux-yocto-3.14/block/Makefile
--- fresh/linux-yocto-3.14/block/Makefile	2017-05-04 20:56:47.459401656 -0700
+++ ioschedulerkernel/linux-yocto-3.14/block/Makefile	2017-05-04 21:35:33.887212098 -0700
@@ -16,6 +16,7 @@
 obj-$(CONFIG_IOSCHED_NOOP)	+= noop-iosched.o
 obj-$(CONFIG_IOSCHED_DEADLINE)	+= deadline-iosched.o
 obj-$(CONFIG_IOSCHED_CFQ)	+= cfq-iosched.o
+obj-$(CONFIG_IOSCHED_C_LOOK)       += sstf-iosched.o
 
 obj-$(CONFIG_BLOCK_COMPAT)	+= compat_ioctl.o
 obj-$(CONFIG_BLK_DEV_INTEGRITY)	+= blk-integrity.o
diff -Nur --new-file fresh/linux-yocto-3.14/block/sstf-iosched.c ioschedulerkernel/linux-yocto-3.14/block/sstf-iosched.c
--- fresh/linux-yocto-3.14/block/sstf-iosched.c	1969-12-31 16:00:00.000000000 -0800
+++ ioschedulerkernel/linux-yocto-3.14/block/sstf-iosched.c	2017-05-04 21:36:59.730607099 -0700
@@ -0,0 +1,147 @@
+/*
+ * elevator c_look
+ */
+#include <linux/blkdev.h>
+#include <linux/elevator.h>
+#include <linux/bio.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+
+int currsect = -1;
+unsigned long circleprint = 0;
+struct c_look_data {
+	struct list_head queue;
+};
+
+static void c_look_merged_requests(struct request_queue *q, struct request *rq,
+				 struct request *next)
+{
+	list_del_init(&next->queuelist);
+}
+
+static int c_look_dispatch(struct request_queue *q, int force)
+{
+	struct c_look_data *nd = q->elevator->elevator_data;
+
+	if (!list_empty(&nd->queue)) {
+		struct request *rq;
+		rq = list_entry(nd->queue.next, struct request, queuelist);
+		list_del_init(&rq->queuelist);
+		elv_dispatch_sort(q, rq);
+		//Assign global variable for C-LOOK seeking
+		currsect = blk_rq_pos(rq);
+		return 1;
+	}
+	return 0;
+}
+
+static void c_look_add_request(struct request_queue *q, struct request *rq)
+{
+	struct c_look_data *nd = q->elevator->elevator_data;
+	struct list_head *cur_r = NULL;
+	
+	list_for_each(cur_r, &nd->queue){
+		struct request *newr = list_entry(cur_r, struct request, queuelist);
+		if(blk_rq_pos(rq) < currsect){
+			if((blk_rq_pos(newr) < currsect) && (blk_rq_pos(rq) < blk_rq_pos(newr))){
+				//if the new request is behind the current sector place it at back of queue
+				break;
+			}
+		}else{
+			//this will go through the nd-queue until it finds a request to insert behind.
+			if((blk_rq_pos(rq) < blk_rq_pos(newr))||(blk_rq_pos(newr) < currsect)){
+				break;
+			}
+		}
+	}
+	if((circleprint%50)==0){
+		printk("[C-LOOK]:Adding request at %lu \n", blk_rq_pos(rq));
+	}
+	circleprint++;
+	list_add_tail(&rq->queuelist, &nd->queue);
+}
+
+static struct request *
+c_look_former_request(struct request_queue *q, struct request *rq)
+{
+	struct c_look_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.prev == &nd->queue)
+		return NULL;
+	return list_entry(rq->queuelist.prev, struct request, queuelist);
+}
+
+static struct request *
+c_look_latter_request(struct request_queue *q, struct request *rq)
+{
+	struct c_look_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.next == &nd->queue)
+		return NULL;
+	return list_entry(rq->queuelist.next, struct request, queuelist);
+}
+
+static int c_look_init_queue(struct request_queue *q, struct elevator_type *e)
+{
+	struct c_look_data *nd;
+	struct elevator_queue *eq;
+
+	eq = elevator_alloc(q, e);
+	if (!eq)
+		return -ENOMEM;
+
+	nd = kmalloc_node(sizeof(*nd), GFP_KERNEL, q->node);
+	if (!nd) {
+		kobject_put(&eq->kobj);
+		return -ENOMEM;
+	}
+	eq->elevator_data = nd;
+
+	INIT_LIST_HEAD(&nd->queue);
+
+	spin_lock_irq(q->queue_lock);
+	q->elevator = eq;
+	spin_unlock_irq(q->queue_lock);
+	return 0;
+}
+
+static void c_look_exit_queue(struct elevator_queue *e)
+{
+	struct c_look_data *nd = e->elevator_data;
+
+	BUG_ON(!list_empty(&nd->queue));
+	kfree(nd);
+}
+
+static struct elevator_type elevator_c_look = {
+	.ops = {
+		.elevator_merge_req_fn		= c_look_merged_requests,
+		.elevator_dispatch_fn		= c_look_dispatch,
+		.elevator_add_req_fn		= c_look_add_request,
+		.elevator_former_req_fn		= c_look_former_request,
+		.elevator_latter_req_fn		= c_look_latter_request,
+		.elevator_init_fn		= c_look_init_queue,
+		.elevator_exit_fn		= c_look_exit_queue,
+	},
+	.elevator_name = "c_look",
+	.elevator_owner = THIS_MODULE,
+};
+
+static int __init c_look_init(void)
+{
+	return elv_register(&elevator_c_look);
+}
+
+static void __exit c_look_exit(void)
+{
+	elv_unregister(&elevator_c_look);
+}
+
+module_init(c_look_init);
+module_exit(c_look_exit);
+
+
+MODULE_AUTHOR("Jens Axboe");
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("No-op IO scheduler");
